from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.backends import default_backend
import os

# 确保路径存在，如果不存在则创建
def ensure_path_exists(path):
    dir_path = os.path.dirname(path)
    if dir_path and not os.path.exists(dir_path):
        os.makedirs(dir_path)
        print(f"目录已创建: {dir_path}")

# 生成RSA密钥对
def generate_rsa_keys(public_exponent=65537, key_size=2048):
    private_key = rsa.generate_private_key(
        public_exponent=public_exponent,
        key_size=key_size,
        backend=default_backend()
    )
    public_key = private_key.public_key()
    return private_key, public_key

# 保存密钥到文件
def save_keys(private_key, public_key, private_key_path="private_key.pem", public_key_path="public_key.pem"):
    ensure_path_exists(private_key_path)
    ensure_path_exists(public_key_path)

    with open(private_key_path, "wb") as f:
        f.write(private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ))
    print(f"私钥已保存到: {private_key_path}")

    with open(public_key_path, "wb") as f:
        f.write(public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ))
    print(f"公钥已保存到: {public_key_path}")

# 加载密钥
def load_private_key(path):
    with open(path, "rb") as f:
        return serialization.load_pem_private_key(f.read(), password=None, backend=default_backend())

def load_public_key(path):
    with open(path, "rb") as f:
        return serialization.load_pem_public_key(f.read(), backend=default_backend())

# 加密文件
def encrypt_file(file_path, public_key_path, output_path):
    public_key = load_public_key(public_key_path)

    with open(file_path, "rb") as f:
        data = f.read()

    aes_key = os.urandom(32)  # 256位AES密钥
    iv = os.urandom(16)       # 128位初始化向量

    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(data) + encryptor.finalize()

    encrypted_aes_key = public_key.encrypt(
        aes_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    ensure_path_exists(output_path)
    with open(output_path, "wb") as f:
        f.write(iv)
        f.write(encrypted_aes_key)
        f.write(encrypted_data)
    print(f"文件已加密并保存到: {output_path}")

# 解密文件
def decrypt_file(encrypted_file_path, private_key_path, output_path):
    private_key = load_private_key(private_key_path)

    with open(encrypted_file_path, "rb") as f:
        iv = f.read(16)
        encrypted_aes_key = f.read(256)
        encrypted_data = f.read()

    aes_key = private_key.decrypt(
        encrypted_aes_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()

    ensure_path_exists(output_path)
    with open(output_path, "wb") as f:
        f.write(decrypted_data)
    print(f"文件已解密并保存到: {output_path}")

# 主程序
if __name__ == "__main__":
    print("欢迎使用RSA文件加密工具！")
    print("1. 生成密钥对")
    print("2. 加密文件")
    print("3. 解密文件")
    print("4. 退出")

    while True:
        choice = input("请选择操作 (1/2/3/4): ").strip()
        if choice == "1":
            private_key_path = input("请输入私钥保存路径（例如：keys/private_key.pem）: ").strip()
            public_key_path = input("请输入公钥保存路径（例如：keys/public_key.pem）: ").strip()
            private_key, public_key = generate_rsa_keys()
            save_keys(private_key, public_key, private_key_path, public_key_path)
        elif choice == "2":
            file_path = input("请输入要加密的文件路径: ").strip()
            public_key_path = input("请输入公钥路径（例如：keys/public_key.pem）: ").strip()
            output_path = input("请输入加密文件保存路径: ").strip()
            encrypt_file(file_path, public_key_path, output_path)
        elif choice == "3":
            encrypted_file_path = input("请输入加密文件路径: ").strip()
            private_key_path = input("请输入私钥路径（例如：keys/private_key.pem）: ").strip()
            output_path = input("请输入解密文件保存路径: ").strip()
            decrypt_file(encrypted_file_path, private_key_path, output_path)
        elif choice == "4":
            print("退出程序。")
            break
        else:
            print("无效的选择，请重新输入！")
